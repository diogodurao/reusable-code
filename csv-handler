from flask import Flask, request, redirect, url_for
import os
import pandas as pd

app = Flask(__name__)
app.config['UPLOAD_FOLDER'] = 'uploads'

def analyze_csv(file_path):
    try:
        # Read the CSV file
        df = pd.read_csv(file_path)
        
        # Check if "Change %" column exists
        if 'Change %' not in df.columns:
            return "No 'Change %' column found in the CSV file."
        
        # Convert dates to datetime and create day of week column
        df['Date'] = pd.to_datetime(df['Date'])
        df['Day_of_Week'] = df['Date'].dt.strftime('%A')  # Full day name
        
        # Filter out weekends (only keep Monday-Friday)
        df = df[df['Date'].dt.dayofweek < 5]  # 0=Monday, 4=Friday
        
        # Convert percentage strings to float numbers
        df['Change %'] = df['Change %'].str.rstrip('%').astype('float')
        # Remove commas from price columns and convert to float
        df['Price'] = df['Price'].str.replace(',', '').astype('float')
        df['High'] = df['High'].str.replace(',', '').astype('float')
        df['Low'] = df['Low'].str.replace(',', '').astype('float')
        
        total_count = len(df['Change %'].dropna())
        if total_count == 0:
            return "No valid data found in the Change % column."
        
        # Calculate positive and negative percentages
        positive_count = len(df[df['Change %'] > 0]['Change %'].dropna())
        negative_count = len(df[df['Change %'] < 0]['Change %'].dropna())
        neutral_count = len(df[df['Change %'] == 0]['Change %'].dropna())
        
        positive_percent = (positive_count / total_count) * 100
        negative_percent = (negative_count / total_count) * 100
        neutral_percent = (neutral_count / total_count) * 100
        
        # Calculate average positive and negative changes
        avg_positive_change = df[df['Change %'] > 0]['Change %'].mean()
        avg_negative_change = df[df['Change %'] < 0]['Change %'].mean()

        # Weekly Analysis
        # Create a week number for each date (Monday as start of week)
        df['Week_Number'] = df['Date'].dt.isocalendar().week
        df['Year'] = df['Date'].dt.isocalendar().year
        
        # Create unique week identifier (year + week number)
        df['Week_ID'] = df['Year'].astype(str) + '-' + df['Week_Number'].astype(str)
        
        # Group data by weeks
        weekly_groups = df.groupby('Week_ID')
        
        weekly_analysis = []
        
        for week_id, week_data in weekly_groups:
            week_data = week_data.sort_values('Date')  # Ensure data is sorted by date
            
            # Calculate weekly metrics
            week_positive_days = len(week_data[week_data['Change %'] > 0])
            week_negative_days = len(week_data[week_data['Change %'] < 0])
            week_neutral_days = len(week_data[week_data['Change %'] == 0])
            
            # Calculate average positive and negative changes for the week
            week_avg_positive = week_data[week_data['Change %'] > 0]['Change %'].mean() if len(week_data[week_data['Change %'] > 0]) > 0 else 0
            week_avg_negative = week_data[week_data['Change %'] < 0]['Change %'].mean() if len(week_data[week_data['Change %'] < 0]) > 0 else 0
            
            # Find best and worst days
            best_day_idx = week_data['Change %'].idxmax()
            worst_day_idx = week_data['Change %'].idxmin()
            best_day = {
                'date': week_data.loc[best_day_idx, 'Date'].strftime('%A, %d/%m/%Y'),
                'change': week_data.loc[best_day_idx, 'Change %']
            }
            worst_day = {
                'date': week_data.loc[worst_day_idx, 'Date'].strftime('%A, %d/%m/%Y'),
                'change': week_data.loc[worst_day_idx, 'Change %']
            }
            
            # Calculate weekly streak
            week_changes = week_data['Change %'].values
            week_dates = week_data['Date'].dt.strftime('%A, %d/%m/%Y').values
            current_week_streak = 1
            max_week_streak = 1
            week_streak_type = 'positive' if week_changes[0] > 0 else 'negative'
            week_streak_start = week_dates[0]
            week_streak_end = week_dates[0]
            current_week_start = week_dates[0]
            
            for i in range(1, len(week_changes)):
                if (week_changes[i] > 0 and week_changes[i-1] > 0) or (week_changes[i] < 0 and week_changes[i-1] < 0):
                    current_week_streak += 1
                    if current_week_streak > max_week_streak:
                        max_week_streak = current_week_streak
                        week_streak_type = 'positive' if week_changes[i] > 0 else 'negative'
                        week_streak_start = current_week_start
                        week_streak_end = week_dates[i]
                else:
                    current_week_streak = 1
                    current_week_start = week_dates[i]
            
            # Find highest and lowest points with specific days
            highest_idx = week_data['High'].idxmax()
            lowest_idx = week_data['Low'].idxmin()
            week_highest_day = week_data.loc[highest_idx, 'Date'].strftime('%A, %d/%m/%Y')
            week_lowest_day = week_data.loc[lowest_idx, 'Date'].strftime('%A, %d/%m/%Y')
            
            # Calculate daily range for most volatile day
            week_data['Abs_Change'] = week_data['Change %'].abs()
            most_volatile_idx = week_data['Abs_Change'].idxmax()
            most_volatile_date = week_data.loc[most_volatile_idx, 'Date'].strftime('%A, %d/%m/%Y')
            most_volatile_change = week_data.loc[most_volatile_idx, 'Change %']
            most_volatile_high = week_data.loc[most_volatile_idx, 'High']
            most_volatile_low = week_data.loc[most_volatile_idx, 'Low']
            most_volatile_range = most_volatile_high - most_volatile_low
            
            # Calculate weekly change by summing all daily changes
            week_change = week_data['Change %'].sum()
            
            # Generate daily breakdown
            daily_breakdown = ""
            for _, day in week_data.iterrows():
                daily_range_points = day['High'] - day['Low']
                daily_range_percent = (daily_range_points / day['Low']) * 100
                daily_breakdown += f"\n  {day['Date'].strftime('%A')}: Change: {round(day['Change %'], 2)}%, "
                daily_breakdown += f"Range: {round(daily_range_percent, 2)}% (${daily_range_points:,.2f}), "
                daily_breakdown += f"High: ${day['High']:,.2f}, Low: ${day['Low']:,.2f}"

            weekly_analysis.append({
                'start_date': week_data.iloc[0]['Date'].strftime('%d/%m/%Y'),
                'end_date': week_data.iloc[-1]['Date'].strftime('%d/%m/%Y'),
                'total_days': len(week_data),
                'positive_days': week_positive_days,
                'negative_days': week_negative_days,
                'neutral_days': week_neutral_days,
                'avg_positive': week_avg_positive,
                'avg_negative': week_avg_negative,
                'best_day': best_day,
                'worst_day': worst_day,
                'highest_point': {'price': week_data['High'].max(), 'date': week_highest_day},
                'lowest_point': {'price': week_data['Low'].min(), 'date': week_lowest_day},
                'most_volatile_day': most_volatile_date,
                'most_volatile_change': most_volatile_change,
                'most_volatile_range': most_volatile_range,
                'week_change': week_change,
                'max_streak': max_week_streak,
                'streak_type': week_streak_type,
                'streak_start': week_streak_start,
                'streak_end': week_streak_end,
                'daily_breakdown': daily_breakdown
            })

        # Calculate longest streak (keeping existing code)
        changes = df['Change %'].values
        dates = df['Date'].dt.strftime('%A, %d/%m/%Y').values
        current_streak = 1
        max_streak = 1
        streak_type = 'positive' if changes[0] > 0 else 'negative'
        streak_start_date = dates[0]
        streak_end_date = dates[0]
        current_start_date = dates[0]
        
        for i in range(1, len(changes)):
            if (changes[i] > 0 and changes[i-1] > 0) or (changes[i] < 0 and changes[i-1] < 0):
                current_streak += 1
                if current_streak > max_streak:
                    max_streak = current_streak
                    streak_type = 'positive' if changes[i] > 0 else 'negative'
                    streak_end_date = current_start_date
                    streak_start_date = dates[i]
            else:
                current_streak = 1
                current_start_date = dates[i]

        # Sort weekly analysis from newest to oldest using the end_date
        weekly_analysis.sort(key=lambda x: pd.to_datetime(x['end_date'], format='%d/%m/%Y'), reverse=True)

        # Generate the output string for overall results
        output = f"""
Analysis Results ({df['Date'].min().strftime('%d/%m/%Y')} - {df['Date'].max().strftime('%d/%m/%Y')} | {total_count} Trading Days):
==================================================
Overall Distribution:
  Positive Days: {round(positive_percent, 2)}% ({positive_count} days)
  Negative Days: {round(negative_percent, 2)}% ({negative_count} days)
  Neutral Days:  {round(neutral_percent, 2)}% ({neutral_count} days)

Average Changes:
  Average Positive Change: {round(avg_positive_change, 2) if not pd.isna(avg_positive_change) else 'N/A'}%
  Average Negative Change: {round(avg_negative_change, 2) if not pd.isna(avg_negative_change) else 'N/A'}%

Longest Overall Streak:
  {max_streak} days ({streak_type}) from {streak_start_date} to {streak_end_date}

Overall High/Low:
  Highest Price: {df.loc[df['High'].idxmax(), 'High']} on {df.loc[df['High'].idxmax(), 'Date'].strftime('%A, %d/%m/%Y')}
  Lowest Price:  {df.loc[df['Low'].idxmin(), 'Low']} on {df.loc[df['Low'].idxmin(), 'Date'].strftime('%A, %d/%m/%Y')}

Weekly Breakdown:
================"""

        # Append weekly breakdown details
        for week_info in weekly_analysis:
            output += f"""

Week: {week_info['start_date']} - {week_info['end_date']} ({week_info['total_days']} Trading Days)
--------------------------------------
  Distribution:
    Positive Days: {week_info['positive_days']}
    Negative Days: {week_info['negative_days']}
    Neutral Days:  {week_info['neutral_days']}
  Average Changes:
    Avg Positive: {round(week_info['avg_positive'], 2) if not pd.isna(week_info['avg_positive']) else 'N/A'}%
    Avg Negative: {round(week_info['avg_negative'], 2) if not pd.isna(week_info['avg_negative']) else 'N/A'}%
  Best/Worst Days:
    Best:  {round(week_info['best_day']['change'], 2)}% on {week_info['best_day']['date']}
    Worst: {round(week_info['worst_day']['change'], 2)}% on {week_info['worst_day']['date']}
  High/Low Points:
    Highest: {week_info['highest_point']['price']} on {week_info['highest_point']['date']}
    Lowest:  {week_info['lowest_point']['price']} on {week_info['lowest_point']['date']}
  Longest Streak:
    {week_info['max_streak']} days ({week_info['streak_type']}) from {week_info['streak_start']} to {week_info['streak_end']}
  Most Volatile Day:
    {week_info['most_volatile_day']} with a change of {round(week_info['most_volatile_change'], 2)}% and a range of ${week_info['most_volatile_range']:,.2f}
  Weekly Change:
    {round(week_info['week_change'], 2)}%
  Daily Breakdown:
{week_info['daily_breakdown']}
"""

        return output

    except FileNotFoundError:
        return "Error: File not found."

@app.route('/')
def index():
    return '''
    <!doctype html>
    <title>Upload CSV File</title>
    <h1>Upload CSV File</h1>
    <form method=post enctype=multipart/form-data>
      <input type=file name=file>
      <input type=submit value=Upload>
    </form>
    '''

@app.route('/', methods=['POST'])
def upload_file():
    if 'file' not in request.files:
        return redirect(request.url)
    file = request.files['file']
    if file.filename == '':
        return redirect(request.url)
    if file:
        file_path = os.path.join(app.config['UPLOAD_FOLDER'], file.filename)
        file.save(file_path)
        # Call the analysis function here
        result = analyze_csv(file_path)
        return f'''
        <h1>Analysis Results</h1>
        <pre>{result}</pre>
        <p><a href="/">Upload another file</a></p>
        '''

if __name__ == '__main__':
    # Create uploads directory if it doesn't exist
    os.makedirs(app.config['UPLOAD_FOLDER'], exist_ok=True)
    app.run(debug=True)
